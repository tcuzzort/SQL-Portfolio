WITH RECURSIVE NTH_MONTH AS (
  -- month anchors from 2022-01-01 through 2025-08-01
  SELECT DATE '2022-01-01' AS ACTIVE_MONTH
  UNION ALL
  SELECT DATEADD(MONTH, 1, ACTIVE_MONTH)
  FROM NTH_MONTH
  WHERE DATEADD(MONTH, 1, ACTIVE_MONTH) <= DATE '2025-08-01'
)

, AGT_INFO_RAW AS (
  -- explicit W2 list
  SELECT
      'W2 AGENTS' AS AGENT_TYPE,
      AGENT_ID,
      AGENT_NAME,
      FIELD_MANAGER_ID,
      COMMISSION_STATEMENTS,
      PAY_CLASSIFICATION
  FROM SINGULARITY.COMPANY.AGENT
  WHERE AGENT_ID IN (
      '003S600000AYBBOIA5','003S600000AOWLGIA1','003S6000000LIA9IAA',
      '003S6000000LHYEIAA','003S600000TUR4BIAR','003S6000000LIG2IAI',
      '003S6000001SXEIIA0','003S6000009NLQJIAI','003S600000GQZ9TIAD',
      '003S600000A0PF1IAF','003S600000CWPJDIAD','003S600000ANSGVIAS'
  )
  UNION ALL
  -- broad pool with derived type
  SELECT
      CASE
        WHEN AGENT_ID IN (
          SELECT AGENT_ID
          FROM SINGULARITY.RPT.APPOINTMENTKM
          GROUP BY AGENT_ID
          HAVING YEAR(MIN(APPOINTMENT_DATE)) = 2022
        )
        THEN 'COMPANY Independent - 2022'
        ELSE EMPLOYEE_RELATIONSHIP_DESCRIPTION
      END AS AGENT_TYPE,
      AGENT_ID,
      AGENT_NAME,
      FIELD_MANAGER_ID,
      COMMISSION_STATEMENTS,
      PAY_CLASSIFICATION
  FROM SINGULARITY.COMPANY.AGENT
  WHERE PAY_CLASSIFICATION='1099'
)

-- Deduplicate by AGENT_ID, PREFER 'W2 AGENTS'
, AGT_INFO AS (
  SELECT *
  FROM AGT_INFO_RAW
  QUALIFY ROW_NUMBER() OVER (
    PARTITION BY AGENT_ID
    ORDER BY
      CASE
        WHEN AGENT_TYPE = 'W2 AGENTS' THEN 1
        WHEN AGENT_TYPE = 'COMPANY Independent - 2022' THEN 2
        ELSE 3
      END
  ) = 1
)

, AGT_LIST AS 
(
  SELECT *
  FROM AGT_INFO
  WHERE AGENT_TYPE IN ('COMPANY Independent - 2022', 'W2 AGENTS')
)

-- First/last presented appt (no HAVING; we want agents even if NULL)
, AGT_FIRST_APPT AS (
  SELECT
      AGENT_ID,
      MIN(APPOINTMENT_DATE) AS FIRST_APPT,
      MAX(APPOINTMENT_DATE) AS LAST_APPT
  FROM SINGULARITY.RPT.APPOINTMENTKM
  WHERE IS_PRESENTED_OR_PARTIAL = 1
  GROUP BY AGENT_ID
)

, AGT_SUMMARY AS (
  SELECT
      L.*,
      F.FIRST_APPT,
      F.LAST_APPT,
      DATE_TRUNC('MONTH', F.FIRST_APPT) AS START_MONTH
  FROM AGT_LIST L
  LEFT JOIN AGT_FIRST_APPT F ON F.AGENT_ID = L.AGENT_ID
)

-- Month rows when overlap exists + placeholder row when no overlap (or no FIRST_APPT)
, AGT_OUTPUT AS (
  -- Month rows for agents with FIRST/LAST that overlap the calendar
  SELECT
      S.*,
      ROW_NUMBER() OVER (PARTITION BY S.AGENT_ID ORDER BY M.ACTIVE_MONTH) AS NTH_MONTH,
      M.ACTIVE_MONTH AS NTH_MONTH_START,
      LAST_DAY(M.ACTIVE_MONTH) AS NTH_MONTH_END
  FROM AGT_SUMMARY S
  JOIN NTH_MONTH M
    ON S.FIRST_APPT IS NOT NULL
   AND S.LAST_APPT  IS NOT NULL
   AND DATE_TRUNC('MONTH', S.FIRST_APPT) <= M.ACTIVE_MONTH
   AND M.ACTIVE_MONTH <= DATE_TRUNC('MONTH', S.LAST_APPT)

  UNION ALL

  -- Placeholder: agent present even if no month overlap (or no presented appts)
  SELECT
      S.*,
      0  AS NTH_MONTH,
      NULL::DATE AS NTH_MONTH_START,
      NULL::DATE AS NTH_MONTH_END
  FROM AGT_SUMMARY S
  WHERE NOT EXISTS (
    SELECT 1
    FROM NTH_MONTH M
    WHERE S.FIRST_APPT IS NOT NULL
      AND S.LAST_APPT  IS NOT NULL
      AND DATE_TRUNC('MONTH', S.FIRST_APPT) <= M.ACTIVE_MONTH
      AND M.ACTIVE_MONTH <= DATE_TRUNC('MONTH', S.LAST_APPT)
  )
)

-- ===================== PART 2: METRICS =====================

, APPT_METRICS AS (
  SELECT
      A.AGENT_ID,
      A.NTH_MONTH,
      COUNT(DISTINCT AP.APPOINTMENT_ID) AS TOTAL_APPT,
      COUNT(DISTINCT CASE WHEN LSI.NATIONAL_LOCAL = 'National' THEN AP.APPOINTMENT_ID END) AS NATIONAL_APPT,
      COUNT(DISTINCT CASE WHEN LSI.NATIONAL_LOCAL <> 'National' THEN AP.APPOINTMENT_ID END) AS LOCAL_APPT,
      COUNT(DISTINCT CASE WHEN AP.IS_PRESENTED_OR_PARTIAL = 1 THEN AP.APPOINTMENT_ID END) AS PRESENTED_APPT,
      COUNT(DISTINCT CASE WHEN LSI.NATIONAL_LOCAL = 'National' AND AP.IS_PRESENTED_OR_PARTIAL = 1 THEN AP.APPOINTMENT_ID END) AS NATIONAL_PRESENTED_APPT,
      COUNT(DISTINCT CASE WHEN LSI.NATIONAL_LOCAL <> 'National' AND AP.IS_PRESENTED_OR_PARTIAL = 1 THEN AP.APPOINTMENT_ID END) AS LOCAL_PRESENTED_APPT,
      COUNT(DISTINCT CASE WHEN AP.IS_PRESENTED_OR_PARTIAL = 1 AND AP.IS_FUNDED = 1 THEN AP.APPOINTMENT_ID END) AS FUNDED_APPT,
      COUNT(DISTINCT CASE WHEN LSI.NATIONAL_LOCAL = 'National' AND AP.IS_PRESENTED_OR_PARTIAL = 1 AND AP.IS_FUNDED = 1 THEN AP.APPOINTMENT_ID END) AS NATIONAL_FUNDED_APPT,
      COUNT(DISTINCT CASE WHEN LSI.NATIONAL_LOCAL <> 'National' AND AP.IS_PRESENTED_OR_PARTIAL = 1 AND AP.IS_FUNDED = 1 THEN AP.APPOINTMENT_ID END) AS LOCAL_FUNDED_APPT
  FROM AGT_OUTPUT A
  LEFT JOIN SINGULARITY.RPT.APPOINTMENTKM AP
         ON A.AGENT_ID = AP.AGENT_ID
        AND A.NTH_MONTH_START IS NOT NULL
        AND AP.APPOINTMENT_DATE BETWEEN A.NTH_MONTH_START AND A.NTH_MONTH_END
  LEFT JOIN SINGULARITY.COMPANY.LEADSOURCE LSI
         ON AP.LEAD_SOURCE_CODE = LSI.LEAD_SOURCE_CODE
  WHERE (AP.LEAD_ID IS NOT NULL OR A.NTH_MONTH_START IS NULL)  -- allow the placeholder row
  GROUP BY
      A.AGENT_ID,
      A.NTH_MONTH
)

, SALES_METRICS AS (
  SELECT
      A.AGENT_ID,
      A.NTH_MONTH,
      MIN(P.KEYED_DATE) AS FIRST_SALES_DATE,
      SUM(CASE WHEN P.PAY_PLAN_ORIGINAL_CODE = 1 THEN P.ORIG_SALES_AMOUNT ELSE 0 END) AS SINGLE_PAY_SALES,
      COUNT(DISTINCT CASE WHEN P.PRODUCT_TYPE_ID = 4 THEN P.INDIVIDUAL_ID END) AS OAP_MEMBERSHIP,
      COUNT(DISTINCT CASE WHEN P.PRODUCT_TYPE_ID <> 4 THEN P.INDIVIDUAL_ID END) AS INDIVIDUAL_W_INSURANCE,
      COUNT(DISTINCT CASE WHEN P.STATUS_CURRENT_CODE = 'A' THEN P.POLICY_ID END) AS ACTIVE_POLICY,
      COUNT(DISTINCT P.POLICY_ID) AS TOTAL_POLICY,
      COUNT(DISTINCT CASE WHEN LSI.NATIONAL_LOCAL = 'National' THEN P.POLICY_ID END) AS NATIONAL_POLICY,
      COUNT(DISTINCT CASE WHEN LSI.NATIONAL_LOCAL <> 'National' THEN P.POLICY_ID END) AS LOCAL_POLICY,
      SUM(P.ORIG_SALES_AMOUNT) AS TOTAL_SALES,
      SUM(CASE WHEN LSI.NATIONAL_LOCAL = 'National' THEN P.ORIG_SALES_AMOUNT END) AS NATIONAL_SALES,
      SUM(CASE WHEN LSI.NATIONAL_LOCAL <> 'National' THEN P.ORIG_SALES_AMOUNT END) AS LOCAL_SALES
  FROM AGT_OUTPUT A
  LEFT JOIN SINGULARITY.RPT.POLICYKM P
         ON A.AGENT_ID = P.AGENT_ID
        AND A.NTH_MONTH_START IS NOT NULL
        AND P.KEYED_DATE BETWEEN A.NTH_MONTH_START AND A.NTH_MONTH_END
  LEFT JOIN SINGULARITY.COMPANY.LEADSOURCE LSI
         ON P.LEAD_SOURCE_CODE = LSI.LEAD_SOURCE_CODE
  GROUP BY
      A.AGENT_ID,
      A.NTH_MONTH
)

, REV_METRICS AS (
  SELECT
      A.AGENT_ID,
      A.NTH_MONTH,
      SUM(CASE WHEN R.TRANSACTION_GROUP_SORT IN (1) THEN R.COMMISSION_TOTAL END) AS GROSS_REVENUE,
      SUM(CASE WHEN LSI.NATIONAL_LOCAL = 'National' AND R.TRANSACTION_GROUP_SORT IN (1) THEN R.COMMISSION_TOTAL END) AS NATIONAL_GROSS_REVENUE,
      SUM(CASE WHEN LSI.NATIONAL_LOCAL <> 'National' AND R.TRANSACTION_GROUP_SORT IN (1) THEN R.COMMISSION_TOTAL END) AS LOCAL_GROSS_REVENUE,
      SUM(CASE WHEN R.TRANSACTION_GROUP_SORT IN (1,2,5) AND R.AGENT_RELATIONSHIP_TYPE = 'COMPANY' THEN R.COMMISSION_TOTAL END) AS NET_COMPANY_REVENUE,
      SUM(CASE WHEN LSI.NATIONAL_LOCAL = 'National' AND R.TRANSACTION_GROUP_SORT IN (1,2,5) AND R.AGENT_RELATIONSHIP_TYPE = 'COMPANY' THEN R.COMMISSION_TOTAL END) AS NATIONAL_NET_COMPANY_REVENUE,
      SUM(CASE WHEN LSI.NATIONAL_LOCAL <> 'National' AND R.TRANSACTION_GROUP_SORT IN (1,2,5) AND R.AGENT_RELATIONSHIP_TYPE = 'COMPANY' THEN R.COMMISSION_TOTAL END) AS LOCAL_NET_COMPANY_REVENUE
  FROM AGT_OUTPUT A
  LEFT JOIN SINGULARITY.RPT.POLICYKM P
         ON A.AGENT_ID = P.AGENT_ID
        AND A.NTH_MONTH_START IS NOT NULL
        AND P.KEYED_DATE BETWEEN A.NTH_MONTH_START AND A.NTH_MONTH_END
  LEFT JOIN STRATEGY_PRODUCT."FINAL".REVENUE R
         ON P.POLICY_ID = R.POLICY_ID
  LEFT JOIN SINGULARITY.COMPANY.LEADSOURCE LSI
         ON P.LEAD_SOURCE_CODE = LSI.LEAD_SOURCE_CODE
  GROUP BY
      A.AGENT_ID,
      A.NTH_MONTH
)

, OUTPUT AS (
  SELECT
      A.*,
      APPT.TOTAL_APPT,
      APPT.NATIONAL_APPT,
      APPT.LOCAL_APPT,
      APPT.PRESENTED_APPT,
      APPT.NATIONAL_PRESENTED_APPT,
      APPT.LOCAL_PRESENTED_APPT,
      APPT.FUNDED_APPT,
      APPT.NATIONAL_FUNDED_APPT,
      APPT.LOCAL_FUNDED_APPT,
      SALES.FIRST_SALES_DATE,
      SALES.SINGLE_PAY_SALES,
      SALES.OAP_MEMBERSHIP,
      SALES.INDIVIDUAL_W_INSURANCE,
      SALES.ACTIVE_POLICY,
      SALES.TOTAL_POLICY,
      SALES.NATIONAL_POLICY,
      SALES.LOCAL_POLICY,
      SALES.TOTAL_SALES,
      SALES.NATIONAL_SALES,
      SALES.LOCAL_SALES,
      REV.GROSS_REVENUE,
      REV.NATIONAL_GROSS_REVENUE,
      REV.LOCAL_GROSS_REVENUE,
      REV.NET_COMPANY_REVENUE,
      REV.NATIONAL_NET_COMPANY_REVENUE,
      REV.LOCAL_NET_COMPANY_REVENUE
  FROM AGT_OUTPUT A
  LEFT JOIN APPT_METRICS APPT
    ON A.AGENT_ID = APPT.AGENT_ID
   AND A.NTH_MONTH = APPT.NTH_MONTH
  LEFT JOIN SALES_METRICS SALES
    ON A.AGENT_ID = SALES.AGENT_ID
   AND A.NTH_MONTH = SALES.NTH_MONTH
  LEFT JOIN REV_METRICS REV
    ON A.AGENT_ID = REV.AGENT_ID
   AND A.NTH_MONTH = REV.NTH_MONTH
)

SELECT *
FROM OUTPUT
ORDER BY AGENT_ID, NTH_MONTH;


--*******************************************************VALIDTION**************************************************	
---2022 AFPS---
WITH FIRST_APPT AS
(
SELECT 
    AGENT_ID,
    MIN(APPOINTMENT_DATE) AS FIRST_APPT
FROM SINGULARITY.RPT.APPOINTMENTKM
GROUP BY AGENT_ID
)

SELECT *
FROM FIRST_APPT F
LEFT JOIN SINGULARITY.COMPANY.AGENT A ON F.AGENT_ID=A.AGENT_ID
WHERE YEAR(FIRST_APPT)=2022 AND A.PAY_CLASSIFICATION='1099'
;

SET AGENT_ID ='003S6000000LHYEIAA';
SET START_DATE = '2023-06-01';
SET END_DATE = '2023-06-30';

--APPT VALIDATION 
SELECT 
    COUNT(DISTINCT APPOINTMENT_ID)				AS TOTAL_APPT
	, COUNT(DISTINCT CASE WHEN IS_PRESENTED_OR_PARTIAL = 1 THEN APPOINTMENT_ID END) AS	PRESENTED_APPT
    , COUNT(DISTINCT CASE WHEN IS_PRESENTED_OR_PARTIAL = 1 AND IS_FUNDED = 1 THEN APPOINTMENT_ID END) AS	FUNDED_APPT
FROM SINGULARITY.RPT.APPOINTMENTKM 
WHERE AGENT_ID = $AGENT_ID
		AND APPOINTMENT_DATE BETWEEN $START_DATE AND $END_DATE
		AND LEAD_ID IS NOT NULL
;
--SALES VALIDATION 
SELECT 
    MIN(KEYED_DATE) AS FIRST_SALES_DATE 
	, SUM(ORIG_SALES_AMOUNT) AS TOTAL_SALES
	, SUM(CASE WHEN PAY_PLAN_ORIGINAL_CODE = 1 THEN ORIG_SALES_AMOUNT ELSE 0 END) AS SINGLE_PAY_SALES
    			--persistency rate 
    , COUNT(DISTINCT CASE WHEN PRODUCT_TYPE_ID = 4 THEN INDIVIDUAL_ID END)		AS OAP_MEMBERSHIP
    , COUNT(DISTINCT CASE WHEN PRODUCT_TYPE_ID <> 4 THEN INDIVIDUAL_ID END)		AS INDIVIDUAL_W_INSURANCE
    , COUNT(DISTINCT CASE WHEN STATUS_CURRENT_CODE = 'A' THEN POLICY_ID END)	AS ACTIVE_POLICY
    , COUNT(DISTINCT POLICY_ID)	AS TOTAL_POLICY
FROM SINGULARITY.RPT.POLICYKM
WHERE AGENT_ID = $AGENT_ID
		AND KEYED_DATE BETWEEN $START_DATE AND $END_DATE
;		
--REV VALIDATION  
SELECT  
    SUM(CASE WHEN TRANSACTION_GROUP_SORT IN (1) THEN COMMISSION_TOTAL END)		AS GROSS_REV
	, SUM(CASE WHEN TRANSACTION_GROUP_SORT IN (1,2,5) AND AGENT_RELATIONSHIP_TYPE = 'COMPANY' THEN COMMISSION_TOTAL END)	AS COMPANY_NET 
FROM SINGULARITY.RPT.POLICYKM P LEFT JOIN STRATEGY_PRODUCT."FINAL".REVENUE ON P.POLICY_ID = REVENUE.COMPANY_POLICY_ID
WHERE P.AGENT_ID = $AGENT_ID
	AND P.KEYED_DATE BETWEEN $START_DATE AND $END_DATE
;

--PERSISTENCY: Sales Persistency Rate = (Number of Policies Still Active from a Specific Period / Total Number of Policies Originally Sold in that Period) * 100
SELECT DISTINCT STATUS_CURRENT_CODE 
					, COUNT(DISTINCT POLICY_ID)
FROM SINGULARITY.RPT.POLICYKM
GROUP BY STATUS_CURRENT_CODE
;

--******************************************DATASET 2: AGENT STATE**************************************
WITH STATE_CODE AS 
(--FH STATE CODE WITH FM
	SELECT DISTINCT FIELD_MANAGER_ID 
				, FIELD_MANAGER_NAME 
				, STATE_CODE 
				, FORECAST_TYPE_DESC 
	FROM SINGULARITY.RPT.FUNERALHOMEKM
	WHERE FIELD_MANAGER_ID IS NOT NULL
)
SELECT *
FROM STATE_CODE
